item_list = record {
    items: list<string>;
}

SortOrder = enum {
    ascending;
    descending;
    random;
} deriving (parcelable, labels, icons)

cpp_context = private_interface {
    typeName: "std::shared_ptr<Context>";
    header: "mylib/context.hpp";
}

sort_items = interface +c {
    # For the iOS / Android demo
    sort(order: SortOrder, items: item_list);
    static create_with_listener(listener: textbox_listener): sort_items;

    # For the localhost / command-line demo
    static run_sort(items: item_list): item_list;

    get_context(): cpp_context;
    set_context(context: cpp_context);
}

textbox_listener = interface +j +o {
    update(items: item_list);
}
